



#include <unistd.h>		//sleep
#include <pthread.h>	//绾跨▼
#include <stdio.h>		//dlopen
#include <stdlib.h>
#include <math.h>
#include "tlib.h"
#include "dem.h"
#include "bch.h"
#include "buffer_c.h"
#include "corr_helper.h"
#include "./fft/Transformer.h"
#include "./fft/Complexs.h"
#include "rsa_use.h"
#include <sys/time.h>
#include "./sab_code/CodeS0.h"
#include "./sab_code/CodeS1.h"
#include "./sab_code/CodeA00.h"
#include "./sab_code/CodeA01.h"
#include "./sab_code/CodeA10.h"
#include "./sab_code/CodeA11.h"
#include "./sab_code/CodeB00.h"
#include "./sab_code/CodeB01.h"
#include "./sab_code/CodeB10.h"
#include "./sab_code/CodeB11.h"
#include <time.h>
/******************************************************************************
鍚嶇О锛氱敵鏄庡嚱鏁�
鍔熻兘锛氱敵鏄庡嚱鏁�
******************************************************************************/

int test_func_real();
int data_init(int n_v, double st_v, int gap_v, double *sFeq_v, double *eFeq_v,int feq_size);

void * thread_1(void* arg);
void doStart();
void doStop();
void recognize();
bool haveSync();
Complexs *findFD(int type, int num);
Complexs *calcY(int offset) ;
double calcArea(Complexs *X, Complexs *Y) ;
int calcK(double feq);
int load_sab();
bool parseData() ;
bool analyze(int offset, int type) ;
int decode(bool *bits,int bits_size,int bits_one_len);
int bytes2int(unsigned char *b) ;
int sleepMS() ;
int data_close();

void synced();
void succRsv(char *data);
void succEnc(char *data);
void failure(int data);
/******************************************************************************
鍚嶇О锛氬０鏄庡父閲�
鍔熻兘锛氬０鏄庡父閲�
******************************************************************************/
#define STARTING   1
#define STARTED   2
#define STOPING   3
#define STOPED   4
#define FRAME_SYMBOL_LEN 31
#define Config_OFFSET_RATES_length 4

int DEF_BUFFER_RATE = 400;
int RESERVE_SN_START = -65536;
int RESERVE_SN_END = 65536;
int SAMPLEING_RATE = 44100;
double SAMPLE_DURATION = 1000 / SAMPLEING_RATE;

double OFFSET_RATES[] = {0.25, 0.5, 0, -0.25};
int TLR = 8;

bool V00[] = {false, false};
bool V01[] = {false, true};
bool V10[] = {true, false};
bool V11[] = {true, true};
/******************************************************************************
鍚嶇О锛氬叏灞�鍙橀噺
鍔熻兘锛氬叏灞�鍙橀噺
******************************************************************************/
int times_=0,old_times_=0;				//! 璋冭瘯鎵撳嵃娆℃暟
int status = STOPED;					//! 绾跨▼鐘舵��
int GAP;
int syncFail;
Complexs *fdMap[3][4];
int N;
int chCount;
short *regSignal;
int regLen;
int ch;
int *SKs;
int *EKs;
int symbolLen;
double ST;
bool bit[2];
int offsets[Config_OFFSET_RATES_length];
int parseSucc;
buffer_c *bc;
Complexs *calcY_fft_c;
Transformer *tsf ;
rsa_use *ru;
//! 绾跨▼鐘舵��-閿�
double core_ss;
#define thread_wait 		1
#define thread_run 			2
#define thread_stoping  	3
#define thread_stop   		4

int thread_1_stause=thread_wait;
int data_init_yn=thread_stop;

//鑾峰彇绯荤粺鏃堕棿
struct timeval time_start,time_stop,time_diff;
/**
      * 璁＄畻涓や釜鏃堕棿鐨勯棿闅旓紝寰楀埌鏃堕棿宸�
      * @param struct timeval* resule 杩斿洖璁＄畻鍑烘潵鐨勬椂闂�
      * @param struct timeval* x 闇�瑕佽绠楃殑鍓嶄竴涓椂闂�
      * @param struct timeval* y 闇�瑕佽绠楃殑鍚庝竴涓椂闂�
      * return -1 failure ,0 success
  **/
  int timeval_subtract(struct timeval* result, struct timeval* x, struct timeval* y)
  {
        int nsec;

        if ( x->tv_sec>y->tv_sec )
                  return -1;

        if ( (x->tv_sec==y->tv_sec) && (x->tv_usec>y->tv_usec) )
                  return -1;

        result->tv_sec = ( y->tv_sec-x->tv_sec );
        result->tv_usec = ( y->tv_usec-x->tv_usec );

        if (result->tv_usec<0)
        {
                  result->tv_sec--;
                  result->tv_usec+=1000000;
        }

        return 0;
  }

//JavaVM * gJavaVM_d;
//jobject  gJavaObj_d;
//jclass  gJavaClass_d;
/******************************************************************************
鍚嶇О锛歮ax
鍔熻兘锛氭祴璇曞嚱鏁�
鍙傛暟锛�
杩斿洖锛�
澶囨敞锛�
******************************************************************************/
int max(int x,int y,short buf_p[],int buf_size)
{
	char out_str[100];
	sprintf(out_str,"[dem][max] cpp x %d y %d\n",x,y);
//	LOGW(out_str);
	test_func_real();
	return 123;
}



/******************************************************************************
鍚嶇О锛歴tart
鍔熻兘锛氬紑濮嬭В璋�
鍙傛暟锛�
杩斿洖锛�
澶囨敞锛�
******************************************************************************/
void start()
{
	INFOR("[dem][start]");

	switch (status) {
		case STARTING:
			while (status == STARTING) {
				usleep(100*1000);
			}
			INFOR("[dem][STARTING]");
			doStop();
			while (status == STOPING) {
				usleep(100*1000);
			}
			doStart();
			break;
		case STARTED:
			doStop();
			while (status == STOPING) {
				usleep(100*1000);
			}
			doStart();
			break;
		case STOPING:
			while (status == STOPING) {
				usleep(100*1000);
			}
			doStart();
			break;
		case STOPED:
			doStart();
			break;
	}
}

/******************************************************************************
鍚嶇О锛歴top
鍔熻兘锛氬仠姝㈣В璋�
鍙傛暟锛�
杩斿洖锛�
澶囨敞锛�
******************************************************************************/
void stop()
{
//	LOGW("[dem][stop]");

	switch (status) {
		case STARTING:
			while (status == STARTING) {
				usleep(100*1000);
			}
			doStop();
			break;
		case STARTED:
			doStop();
			break;
		case STOPING:
			break;
		case STOPED:
			break;
	}
}

/******************************************************************************
鍚嶇О锛歴top
鍔熻兘锛氬仠姝㈣В璋�
鍙傛暟锛�
杩斿洖锛�
澶囨敞锛�
******************************************************************************/
//鑾峰緱褰撳墠瑙ｈ皟鐘舵��
int getStatus()
{
	//LOGW("[dem][getStatus]");
	return status;
}

/******************************************************************************
鍚嶇О锛歡etBufferSize
鍔熻兘锛氳幏鍙栫紦鍐插尯澶у皬
鍙傛暟锛�
杩斿洖锛�
澶囨敞锛�
******************************************************************************/
int getBufferSize()
{
	//LOGW("[dem][getBufferSize]");
	//return signalBuffer.size();
	return bc->size();
}

/******************************************************************************
鍚嶇О锛歡etRegSignal
鍔熻兘锛氳幏寰楀綋鍓嶈В鏋愮殑澹扮爜鐨勯噰鏍�
鍙傛暟锛�
杩斿洖锛�
澶囨敞锛�

******************************************************************************/
short* getRegSignal(int &len_v)
{
	//LOGW("[dem][getRegSignal]");
	len_v=regLen;
	short *ddd=regSignal;
	return ddd;
}

/******************************************************************************
鍚嶇О锛歠illRate
鍔熻兘锛氱紦鍐插尯濉厖鐜囷紝0锛氱┖锛�1锛氭弧
鍙傛暟锛�
杩斿洖锛�
澶囨敞锛�

******************************************************************************/
double fillRate()
{
	double d=(double)bc->fillSize()/(double)bc->size();
	return d;
}

/******************************************************************************
鍚嶇О锛歴etBufferSize
鍔熻兘锛氶噸缃紦鍐插尯澶у皬
鍙傛暟锛�
杩斿洖锛�
澶囨敞锛�

******************************************************************************/
void setBufferSize(int size)
{
	//char str1[100];
	//sprintf(str1,"[dem][setBufferSize] size:%d",size);
	//LOGW(str1);
	bc->setBufferSize(size);
}

/******************************************************************************
鍚嶇О锛歝learBuffer
鍔熻兘锛氭竻绌虹紦鍐插尯
鍙傛暟锛�
杩斿洖锛�
澶囨敞锛�

******************************************************************************/
void clearBuffer()
{
	//char str1[100];
	//sprintf(str1,"[dem][clearBuffer] ");
	//LOGW(str1);
	bc->clearBuffer();
}


/******************************************************************************
鍚嶇О锛歸irte
鍔熻兘锛氬悜缂撳啿鍖哄啓鍏ユ暟鎹�
鍙傛暟锛�
杩斿洖锛�
澶囨敞锛�

******************************************************************************/
int wirte(short data[],int data_size)
{
	bc->write(data,data_size);
	return 0;
}

/******************************************************************************
鍚嶇О锛歞oStart
鍔熻兘锛氬惎鍔ㄤ竴涓笟鍔＄嚎绋�
鍙傛暟锛�
杩斿洖锛�
澶囨敞锛�

******************************************************************************/
void  doStart()
{
	//LOGW("[dem][doStart]");
	INFOR("DO START");
	pthread_t    g_thread_1;
	if  (pthread_create(&g_thread_1, NULL,  &thread_1, (void*)0) != 0 )
	{ }
}

/******************************************************************************
鍚嶇О锛歵hread_1
鍔熻兘锛歵hread_1
鍙傛暟锛�
杩斿洖锛�
澶囨敞锛�

******************************************************************************/
void * thread_1(void* arg)
 {
	INFOR("thread_1");
	//__android_log_print(ANDROID_LOG_ERROR, "NATIVE:","thread_1_stause = %d",thread_1_stause);
 	//! 淇″彿閲忛槻姝㈠娆″悓鏃跺惎鍔ㄨ绾跨▼
 	if(thread_1_stause==thread_wait || thread_1_stause==thread_stop)
 	{
 			thread_1_stause=thread_run;
 	}
 	else
 	{
	 	 return NULL;
 	}
	status  = STARTING;
	status  =  STARTED;
	while(status   ==  STARTED)
	{

		//! 璁＄畻绛夊緟鏃堕棿
		int  sleepMS_   =sleepMS();
	//	__android_log_print(ANDROID_LOG_ERROR, "NATIVE:","sleepMS_ = %d",sleepMS_);
	//	INFOR("FILL SPACE GO TO CACL it");
		if (sleepMS_  == 0)
		{
		//	INFOR("recognize();");
			recognize();

		}
		else
		{
			usleep(sleepMS_*1000);
		}
	}
	status = STOPED;

	//! 淇″彿閲忛槻姝㈠娆″悓鏃跺惎鍔ㄨ绾跨▼
	thread_1_stause=thread_stop;
	//printf("[thread_1] over\n");
//	LOGW("[dem][thread_1] over");
}

/******************************************************************************
鍚嶇О锛歞oStop
鍔熻兘锛氬仠姝笟鍔＄嚎绋�
鍙傛暟锛�
杩斿洖锛�
澶囨敞锛�

******************************************************************************/
void doStop()
{
	//LOGW("[dem][doStop]");
	status = STOPING;
}

/******************************************************************************
鍚嶇О锛歞em_init
鍔熻兘锛氬洖璋冨垵濮嬪寲
鍙傛暟锛�
杩斿洖锛�
澶囨敞锛氬洖璋冩柟娉�,callback native_call.so

******************************************************************************/
//int dem_init(JavaVM * gJavaVM_v,jobject  gJavaObj_v,jclass  gJavaClass_v,
  int dem_init( int n_v, double st_v, int gap_v, double *sFeq_v, double *eFeq_v,int feq_size)
{
	//! 淇濆瓨vm铏氭嫙鏈�
//	gJavaVM_d=gJavaVM_v;
//	gJavaObj_d=gJavaObj_v;
//	gJavaClass_d=gJavaClass_v;
    //! 鍒濆鍖栨暟鎹�
    /*
	int n_v=2048;
	double st_v=0.15;						//! 鐩镐技搴�
	int gap_v=512;
	int feq_size=3;				//!  淇￠亾鏁�
	//! 淇￠亾
	double sFeq[]={16, 12, 8, 4};//{5.5125};
	double eFeq[]={20, 16, 12, 8};//{11.025};
	*/
  //  data_init(n_v,st_v,gap_v,sFeq_v,eFeq_v,feq_size);


}

//褰撳悓姝ュ埌澹扮爜鏃朵細鍥炶皟鐢ㄦ鏂规硶
void synced()
{
	 gettimeofday(&time_start,0);
	//callback_java("synced","BBBBBB",100);
}

//褰撳悓姝ュ埌澹扮爜鍚庤В鏋愭垚鍔熸椂浼氬洖璋冪敤姝ゆ柟娉�
void succRsv(char *data)
{

	gettimeofday(&time_stop,0);
	timeval_subtract(&time_diff,&time_start,&time_stop);

	callback_java("RSV:spend_time",data,(time_diff.tv_usec/1000));
}

//褰撳悓姝ュ埌澹扮爜鍚庤В鏋愭垚鍔熸椂浼氬洖璋冪敤姝ゆ柟娉�
void succEnc(char *data)
{

	gettimeofday(&time_stop,0);
	timeval_subtract(&time_diff,&time_start,&time_stop);

	callback_java("ENC:spend_time",data,(time_diff.tv_usec/1000));
}

//褰撳悓姝ュ埌澹扮爜鍚庤В鏋愬け璐ユ椂浼氬洖璋冪敤姝ゆ柟娉�
void failure(int data)
{
	callback_java("failure","AAAAAAA",100);
}


/******************************************************************************
鍚嶇О锛歵est_func_reg
鍔熻兘锛氭祴璇曞悇涓柟娉曟槸鍚︽甯�
鍙傛暟锛�
杩斿洖锛�
澶囨敞锛歠ft bch buffer

******************************************************************************/
int test_func()
{

	return 0;
}
/******************************************************************************
鍚嶇О锛歳ead_file
鍔熻兘锛氳鍙栨枃浠�
鍙傛暟锛�
杩斿洖锛�
澶囨敞锛歠ft bch buffer

******************************************************************************/
int read_file(char *filePath,char *file_p,int *file_size_v)
{
	int file_size=0;
	FILE *fp;
	// r+
    if((fp = fopen (filePath,"r+"))==NULL)
    {
        return -1;
    }
    fseek(fp,0L,SEEK_END);
    file_size=ftell(fp);
    if(file_size==0)
    	{
        fclose(fp);
        return -2;
    }
    fseek(fp,0L,SEEK_SET);
    fread(file_p,file_size,1,fp);
    file_p[file_size]=0x00;
    fclose(fp);
    memcpy(file_size_v,&file_size,sizeof(int));

    return 1;
}

/******************************************************************************
鍚嶇О锛歞ata_init
鍔熻兘锛氭暟鎹垵濮嬪寲
鍙傛暟锛� n_v FFT鐐规暟,st_v 鐩镐技搴�,
杩斿洖锛�
澶囨敞锛�
******************************************************************************/
int data_init(int n_v, double st_v, int gap_v, int *sFeq_v, int *eFeq_v,int feq_size)
{

	INFOR("data_init");

	__android_log_print(ANDROID_LOG_INFO, "START:","g_java->sys_cfg.start_feq0  = %d", sFeq_v[0]);
	__android_log_print(ANDROID_LOG_INFO, "START:","g_java->sys_cfg.start_feq1  = %d", sFeq_v[1]);
	__android_log_print(ANDROID_LOG_INFO, "START:","g_java->sys_cfg.start_feq2  = %d", sFeq_v[2]);
	__android_log_print(ANDROID_LOG_INFO, "START:","g_java->sys_cfg.start_feq3  = %d", sFeq_v[3]);

	__android_log_print(ANDROID_LOG_INFO, "START:","g_java->sys_cfg.end_feq0    = %d", eFeq_v[0]);
	__android_log_print(ANDROID_LOG_INFO, "START:","g_java->sys_cfg.end_feq1    = %d", eFeq_v[1] );
	__android_log_print(ANDROID_LOG_INFO, "START:","g_java->sys_cfg.end_feq2    = %d", eFeq_v[2]);
	__android_log_print(ANDROID_LOG_INFO, "START:","g_java->sys_cfg.end_feq3    = %d", eFeq_v[3] );

	__android_log_print(ANDROID_LOG_INFO, "START:","g_java->sys_cfg.gap        = %d", gap_v);
	__android_log_print(ANDROID_LOG_INFO, "START:","g_java->sys_cfg.fft_points = %d", n_v);
	__android_log_print(ANDROID_LOG_INFO, "START:","g_java->sys_cfg.fft_chains = %d", feq_size);


	__android_log_print(ANDROID_LOG_INFO, "START:","g_java->sys_cfg.st         = %f", st_v);
	if(data_init_yn==thread_stop)
	{
		data_init_yn=thread_run;
		char str1[100];
		sprintf(str1,"[dem_init] successful\n");

	}
	else if(data_init_yn==thread_run)
	{

		data_init_yn=thread_stoping;
		data_close();
		data_init_yn=thread_run;
	}
	else if(data_init_yn==thread_stoping)
	{

		return -1;
	}
	//! 鍒濆鍖栧叏灞�鍙橀噺
	N=n_v;//2048
	ST=st_v;//0.15;						//! 鐩镐技搴�
	GAP=gap_v;//512;
	chCount=feq_size;				//!  淇￠亾鏁�

	int maxOffest = 0;//1024;
	int minOffest = 0;//512;
	for (int i = 0; i < Config_OFFSET_RATES_length; i++)
	{
		offsets[i] = (int) (N * OFFSET_RATES[i]);
		maxOffest = offsets[i] > maxOffest ? offsets[i] : maxOffest;
		minOffest = offsets[i] < minOffest ? offsets[i] : minOffest;
	}

	SKs = new int[chCount];
	EKs = new int[chCount];

	//4涓俊閬�
	for (int i = 0; i < chCount; i++)
	{
		SKs[i] = calcK(sFeq_v[i]);//鑾峰彇棰戠巼瀵瑰簲鐨勭偣 //16K,12K,8K,4K
		EKs[i] = calcK(eFeq_v[i]); //20K,16K,12K,8K
	}
	int tl = N / TLR; // 8
	symbolLen = tl * 2 + N;
	regLen = symbolLen * FRAME_SYMBOL_LEN + N + maxOffest;
	regSignal=(short*)malloc(sizeof(short)*regLen*2);
	parseSucc = symbolLen * FRAME_SYMBOL_LEN + tl;
	//姣忎竴娆″悓姝ュけ璐ュ悗绉诲姩鏁版嵁闀垮害?
	syncFail=GAP;

	//! fft鍒濆鍖�
	tsf =new Transformer(N);
	load_sab();
    //! 鍑芥暟涓撶敤杩斿洖绫�
	calcY_fft_c=new Complexs(N);
	//! 鍒涘缓缂撳啿鍖�
	bc=new buffer_c(N*DEF_BUFFER_RATE);
	//! rsa鍔犲瘑
	ru=new rsa_use();

	return 0;
}

/******************************************************************************
鍚嶇О锛歞ata_close
鍔熻兘锛氭暟鎹噴鏀�
鍙傛暟锛�
杩斿洖锛�
澶囨敞锛�
******************************************************************************/
int data_close()
{
	delete ru;
	delete []SKs;
	delete []EKs;
	free(regSignal);
	delete tsf;
	delete calcY_fft_c;
	delete bc;

	for(int i=0;i<3;i++)
	{
		for(int k=0;k<4;k++)
		{
			delete fdMap[i][k]	;
		}
	}

	return 0;
}


/******************************************************************************
鍚嶇О锛歵est_func_real
鍔熻兘锛氬疄闄呴�昏緫娴嬭瘯鍑芥暟
鍙傛暟锛�
杩斿洖锛�
澶囨敞锛歠ft bch buffer

	//! 0.鍒濆鍖�
	//! 1.璇诲彇wav
	//! 2.鍒涘缓缂撳啿鍖�
	//! 3.鍐欏叆缂撳啿鍖�
	//! 4.绾跨▼寮�濮�
	//! 5.绾跨▼缁撴潫

******************************************************************************/
int test_func_real()
{

	//! 璇诲彇 /sdcard/a1.wav
	char *file_p=(char*)malloc(1024*1024*2);
	int file_size=0;
	char file_path[]="/data/local/tmp/a2.wav";
	int err1=read_file(file_path,file_p,&file_size);
	printf("[file size:]%d \n",file_size);
	char out_str[100];
	sprintf(out_str,"[file size:] filesize:%d :data_size%d  \n",file_size,(int)((file_size-44)/sizeof(short)));
//	LOGW(out_str);
	if(err1<0)
		return -1;
	//! wav澶�
	file_p+=44;
	file_size-=44;

	int n_v=2048;
	double st_v=0.15;						//! 鐩镐技搴�
	int gap_v=512;
	int feq_size=4;				//!  淇￠亾鏁�
	//! 淇￠亾
	double sFeq[]={16, 12, 8, 4};//{5.5125};
	double eFeq[]={20, 16, 12, 8};//{11.025};
    data_init(n_v,st_v,gap_v,sFeq,eFeq,feq_size);

	//! 鍐欏叆缂撳啿鍖�
	short *short_file_p=(short *)malloc(1024*1024*sizeof(short));
	memset(short_file_p,0,1024*1024*sizeof(short));
	short temp_a;
	for(int i=0;i<(file_size/sizeof(short));i++)
	{
		memcpy(&temp_a,file_p+i*sizeof(short),sizeof(short));
		short_file_p[i]=temp_a;
	}
	printf("[init] write_buf_Len:%d\n",(int)(file_size/sizeof(short)));
	//bc->write(short_file_p,file_size/sizeof(short));

	//! dem绾跨▼寮�濮�
	start();

	//sleep(10);
	short *var1=new short[1792];
	int for_ik=0;
	for(int k=0;k<1000;k++)
	{
		for(int i=0;i<290;i++)
		{
			memcpy(var1,file_p+i*1792*sizeof(short),1792*sizeof(short));
			bc->write(var1,1792);
			usleep(41*1000);
			for_ik++;
		}
		printf("------buf %lf---------------%d----------k:%d ----\n",fillRate(),for_ik,k);
	}
	printf("-------------------------------------[for_ik]%d-\n",for_ik);

	stop();

	return 0;
}

/******************************************************************************
鍚嶇О锛歳ead_sab
鍔熻兘锛氬姞杞芥牱鍊�
鍙傛暟锛�
杩斿洖锛�
澶囨敞锛歠ft bch buffer
******************************************************************************/
int load_sab()
{
	int c_size=sizeof(S0_TD)/sizeof(double);//16384;
	fdMap[0][0]=tsf->fft(S0_TD,c_size);
	c_size=sizeof(S1_TD)/sizeof(double);//16384;
	fdMap[0][1]=tsf->fft(S1_TD,c_size);
	c_size=sizeof(A00_TD)/sizeof(double);//16384;
	fdMap[1][0]=tsf->fft(A00_TD,c_size);
	c_size=sizeof(A01_TD)/sizeof(double);//16384;
	fdMap[1][1]=tsf->fft(A01_TD,c_size);
	c_size=sizeof(A10_TD)/sizeof(double);//16384;
	fdMap[1][2]=tsf->fft(A10_TD,c_size);
	c_size=sizeof(A11_TD)/sizeof(double);//16384;
	fdMap[1][3]=tsf->fft(A11_TD,c_size);
	c_size=sizeof(B00_TD)/sizeof(double);//16384;
	fdMap[2][0]=tsf->fft(B00_TD,c_size);
	c_size=sizeof(B01_TD)/sizeof(double);//16384;
	fdMap[2][1]=tsf->fft(B01_TD,c_size);
	c_size=sizeof(B10_TD)/sizeof(double);//16384;
	fdMap[2][2]=tsf->fft(B10_TD,c_size);
	c_size=sizeof(B11_TD)/sizeof(double);//16384;
	fdMap[2][3]=tsf->fft(B11_TD,c_size);
	return 0;
}

/******************************************************************************
鍚嶇О锛歳ecognize
鍔熻兘锛氬疄闄呴�昏緫娴嬭瘯鍑芥暟
鍙傛暟锛�
杩斿洖锛�
澶囨敞锛歠ft bch buffer
******************************************************************************/
void recognize()
{
	char out_str[100];

	if (haveSync()) //鎵惧埌澶�	S0
	{
		//INFOR("haveSync");
	//	sprintf(out_str,"[haveSync]  successful!\n");

		//data_init
		if (parseData()) //鍒嗘瀽鏁版嵁
		{
			//sprintf(out_str,"[parseData] successful! doSkip:%d\n",parseSucc);
			//printf("%s",out_str);
			//LOGW(out_str);
			bc->doSkip(parseSucc);//缂撳啿鍖轰粩瀵绘壘
		//	INFOR("bc->doSkip(parseSucc);//缂撳啿鍖轰粩瀵绘壘");
		}
		else
		{
			bc->doSkip(syncFail);
		}
	}
	else
	{
		bc->doSkip(syncFail);
	}
}

/******************************************************************************
鍚嶇О锛歨aveSync
鍔熻兘锛氭牱鏈琒澶撮儴
鍙傛暟锛�
杩斿洖锛�
澶囨敞锛歠ft bch buffer
******************************************************************************/
bool haveSync()
{
	Complexs *X = findFD(0, 1);//鑾峰彇鏍锋湰淇℃伅 //S01鏍锋湰澶�?
	Complexs *Y = calcY(0);//璁＄畻鏍锋湰寮�澶寸殑鏁版嵁鐨凢FT

	for (int i = 0; i < chCount; i++) //淇￠亾
	{
		ch = i;
		if (calcArea(X, Y) < ST) //璁＄畻鐩稿叧鎬ф槸鍚﹀湪缁欏畾鐨勮寖鍥翠箣鍐呭姣斿ご鏁版嵁S0
		{
			//! 璋冭瘯杈撳嚭
			printf("[regLen]%d\n",regLen);
			bc->preview(regSignal,regLen, 0);//璺宠浆涓�鍧楃户缁绠�
			return true;
		}
	}
	memset(regSignal,0,sizeof(short)*regLen*2);
	return false;
}

/******************************************************************************
鍚嶇О锛歝alcArea
鍔熻兘锛氬姣� X Y, X涓烘牱鏈ご鏁版嵁,Y涓洪渶瑕佸姣旂殑鏁版嵁
鍙傛暟锛�
杩斿洖锛�
澶囨敞锛歠ft bch buffer
******************************************************************************/
double calcArea(Complexs *X, Complexs *Y)
{

	char out_str[1024];

	Complexs *Z = new Complexs(N);

	//16  12  8  4
	//
	//20  16  12 8
	//X鍏辫江*Y
	for (int i = SKs[ch]; i <= EKs[ch]; i++)
	{
		Z->res[i] = X->res[i] * Y->res[i] + X->ims[i] * Y->ims[i];//Z瀹為儴

		Z->ims[i] = X->res[i] * Y->ims[i] - Y->res[i] * X->ims[i];
	}

	//! ifft
	double r[N];
	int r_len;
	tsf->ifft(Z,r,r_len);//FFT鍙嶅彉鎹㈡眰鍘熶俊鍙�,r閲岄潰瀛樻斁鐨勬槸缁欏畾淇″彿鐨勬椂闃堜俊鍙�
	delete Z;


//鎵炬椂淇″彿涓箙搴︽渶灏忕殑?
	double peakValue = 0;
	for (int i = 0; i < N; i++)
	{
		if (peakValue < r[i])
		{
			peakValue = r[i];
		}
	}

//姹傞潰绉�
	double area = 1;
	for (int i = 0; i < N; i++)
	{
		//! abs杩斿洖缁濆鍊�
		area = area +fabs(r[i]);
	}

//鍧囧�肩畻鍗犳湁鐜�
	area = area / peakValue / N;
	core_ss = area;
	return area;
}

/******************************************************************************
鍚嶇О锛歠indFD
鍔熻兘锛氳幏鍙栨牱鏈暟鎹�
鍙傛暟锛�
杩斿洖锛�
澶囨敞锛�

******************************************************************************/
Complexs *findFD(int type, int num)
{
	return  fdMap[type][num];
}

/******************************************************************************
鍚嶇О锛歝alcY
鍔熻兘锛氳幏鍙栫紦鍐插尯鏁版嵁
鍙傛暟锛�
杩斿洖锛�
澶囨敞锛�

******************************************************************************/
Complexs *calcY(int offset)
{
	//! 璇诲彇缂撳瓨
	short td[N];//first offset = 0; N=4096
	bc->preview(td,N, offset) ;//read 4096 point to td[N]

	//!fft
	double td_d[N];
	for(int i=0;i<N;i++)
	{
		td_d[i]=(double)td[i];
	}

	Complexs *fd = tsf->fft(td_d,N);
	calcY_fft_c->set(fd->res,fd->ims,N);
	delete fd;
	return calcY_fft_c;//fft data
}

/******************************************************************************
鍚嶇О锛歝alcK
鍔熻兘锛氳幏鍙栭鐜囧搴旂偣鏁�
鍙傛暟锛�
杩斿洖锛�
澶囨敞锛�

******************************************************************************/
int calcK(int feq)
 {
 	//! 闇�瑕佺簿纭苟涓斿洓鑸嶄簲鍏�
	return (int) (feq * 1000 / 44100 * N);//閲囩敤4410閲囨牱鐜�,2048涓偣 44100----->2048 涓偣 0 - 0
}

/******************************************************************************
鍚嶇О锛歱arseData
鍔熻兘锛氬鏋滃０鐮佹牱鏈姣旀垚鍔�,鍒欒繑鍥炲倕绔嬪彾鍙樻崲鍚庣殑bch鍊�
鍙傛暟锛�
杩斿洖锛�
澶囨敞锛�

******************************************************************************/
bool parseData()
{
	//INFOR("parseData------------>");
	//! 鍥炶皟鍑芥暟,鎵惧埌澶存暟鎹甋0??
	synced();
	int bad = 0;
	bool dataBits[2][FRAME_SYMBOL_LEN];

	for (int i = 0; i < FRAME_SYMBOL_LEN; i++)
	{
		if (!analyze((i + 1) * symbolLen, i % 2))
		{
			bad++;
			//todo:璋冩暣bad鏁板��
			if (bad > 6)
			{
				failure(0);
				return false;
			}
		}
		dataBits[0][i] = bit[0];
		dataBits[1][i] = bit[1];
	}

	bool tem_var1[2*FRAME_SYMBOL_LEN];
	int tem_var1_nu=0;
	for(int j=0;j<2;j++)
	{
		for(int i=0;i<FRAME_SYMBOL_LEN;i++)
		{
			tem_var1[tem_var1_nu]=dataBits[j][i];
			tem_var1_nu++;
		}
	}
	int data=decode(tem_var1,2*FRAME_SYMBOL_LEN,FRAME_SYMBOL_LEN);
	//! 璋冭瘯杈撳嚭
	//char out_str[100];
	//sprintf(out_str,"[parseData] %d",data);
	//LOGW(out_str);

	if (data >= RESERVE_SN_START && data <= RESERVE_SN_END)
	 {
		char data_str[100];
		sprintf(data_str,"%d",data);
		succRsv(data_str);//todo:鍔犲瘑
	}
	else
	{
		//! java涓澶勪紶鍏ョ殑data涓篠tring
		char data_str[100];
		sprintf(data_str,"%d",data);
	//	succEnc(data_str);//todo:鍔犲瘑
		succRsv(data_str);//todo:鍔犲瘑
	}

	return true;
}

/******************************************************************************
鍚嶇О锛歛nalyze
鍔熻兘锛氭櫤鑳藉姩鎬侀�夋嫨寮�濮嬩綅缃�
鍙傛暟锛�
杩斿洖锛�
澶囨敞锛�

******************************************************************************/
bool analyze(int offset, int type)
{
	//! 涓巎ava鐗堟湰-1 0 1sab涓嶅悓,鎹负 0123
	type+=1;

	corr_helper ch;
	correlation cl[4];
	correlation cl_all[Config_OFFSET_RATES_length];
	int cl_all_nu=0;

	for (int i = 0; i < Config_OFFSET_RATES_length; i++)
	{
		Complexs *Y = calcY(offset + offsets[i]);

		double var0=calcArea(findFD(type, 0), Y);
		double var1=calcArea(findFD(type, 1), Y);
		double var2=calcArea(findFD(type, 2), Y);
		double var3=calcArea(findFD(type, 3), Y);

		//! 璧嬪��
		cl[0].value=var0;
		cl[0].data[0]=V00[0];
		cl[0].data[1]=V00[1];
		cl[1].value=var1;
		cl[1].data[0]=V01[0];
		cl[1].data[1]=V01[1];
		cl[2].value=var2;
		cl[2].data[0]=V10[0];
		cl[2].data[1]=V10[1];
		cl[3].value=var3;
		cl[3].data[0]=V11[0];
		cl[3].data[1]=V11[1];
		//! 鑾峰彇鏈�灏忓��
		//correlation *cl_var1=ch.min(cl,4);
		int min_nu=ch.min(cl,4);
		cl_all[cl_all_nu].value=cl[min_nu].value;
		cl_all[cl_all_nu].data[0]=cl[min_nu].data[0];
		cl_all[cl_all_nu].data[1]=cl[min_nu].data[1];
		cl_all_nu++;
		if (cl[min_nu].value < ST)
		{
			bit[0]=cl[min_nu].data[0];
			bit[1]=cl[min_nu].data[1];
			return true;
		}
	}

	//! 鎵惧埌鏁扮粍16涓暟鎹噷鏈�灏忕殑閭ｄ釜
	int min_nu=ch.min(cl_all,Config_OFFSET_RATES_length);
	bit[0]=cl_all[min_nu].data[0];
	bit[1]=cl_all[min_nu].data[1];
	return false;
}

/******************************************************************************
鍚嶇О锛歞ecode
鍔熻兘锛歜ch缂栫爜
鍙傛暟锛�
杩斿洖锛�
澶囨敞锛�

******************************************************************************/
int decode(bool *bits,int bits_size,int bits_one_len)
{
	bool bs[bits_one_len];
	unsigned char t[2] ;
	unsigned char bytes[4];
	for(int i=0;i<bits_size/bits_one_len;i++)
	{
		int msg = 0;
		memcpy(bs,bits+i*bits_one_len,bits_one_len);
		for(int j=0;j<bits_one_len;j++)
		{
			msg = msg | ((bs[j] ? 1 : 0) << bits_one_len - j - 1);
		}
		bch_decoder(msg,t);
		bytes[i * 2] = t[0];
		bytes[i * 2 + 1] = t[1];
	}
	int bi=bytes2int(bytes);
	return bi;
}

/******************************************************************************
鍚嶇О锛歜ytes2int
鍔熻兘锛歜ytes杞琲nt
鍙傛暟锛�
杩斿洖锛�
澶囨敞锛�

******************************************************************************/
int bytes2int(unsigned char *b)
{
	int temp = 0;
	int res = 0;
	for (int x = 0; x < 4; x++)
	{
		res <<= 8;
		temp = b[x] & 0xff;
		res |= temp;
	}
	//printf("[bytes2int] %d  \n",res);
	return res;
}

/******************************************************************************
鍚嶇О锛歴leepMS
鍔熻兘锛歴leepMS
鍙傛暟锛�
杩斿洖锛�
澶囨敞锛�

******************************************************************************/
int sleepMS()
{
	int delta = regLen - bc->fillSize();
	if (delta <= 0)
	{
		return 0;
	}
	else
	{
		return (int) (delta * SAMPLE_DURATION + 1);
	}
}


/******************************************************************************
鍚嶇О锛歵est_new_fft
鍔熻兘锛歵est_new_fft
鍙傛暟锛�
杩斿洖锛�
澶囨敞锛�

******************************************************************************/
int test_new_fft()
{
		int len = 16;
	Transformer *t = new Transformer(len);


	double td[] = {8, 2, 4, -8, 0, 5, -9, 5, 0, 5, 1, 4, 7, 3, 6, 4};
	Complexs *fd = t->fft(td,len);
	for (int i = 0; i < len; i++)
	{
		printf("[fft]  [ i:%d]  %lf %lf\n",i,fd->res[i] , fd->ims[i]);
	}
	printf("\n\n");
	double *tdBack =new double[len];
	int tdBack_len;
	t->ifft(fd,tdBack,tdBack_len);
	for (int i = 0; i < len; i++)
	{
		printf("[ifft]  [ i:%d]  %lf\n",i,tdBack[i] / len);
	}

	delete fd;
	delete t;
	return 0;
}

/******************************************************************************
鍚嶇О锛歮ain
鍔熻兘锛歮ain
鍙傛暟锛�
杩斿洖锛�
澶囨敞锛�

******************************************************************************/
/*
int main()
{
	printf("[main] satrt\n");
	//test_new_fft();
	test_func_real();
	//demi de;
	printf("[main] over\n");
	return 0;
}
*/
