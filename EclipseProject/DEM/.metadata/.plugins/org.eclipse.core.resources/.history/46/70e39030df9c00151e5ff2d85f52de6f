#include <stdio.h>
#include <string.h>
#include <jni.h>
#include <stdio.h>
#include "net_telesing_tsdk_tlib_Acomms.h"
#include "tlib.h"
#ifdef __cplusplus
extern "C" {
#endif

#include <android/log.h>
#define LOG_TAG "[APP]:"
#define LOGW(a )  __android_log_write(ANDROID_LOG_WARN,LOG_TAG,a)

JavaVM* globe_JavaVM;
jobject globe_JavaObj;
jclass  globe_JavaClass;
CER cer_infor;
Recog_status recog_status;

//@JNI中将JNIEnv存到全域变量中g_env
jobject getInstance(JNIEnv* env, jclass obj_class)
{
    jmethodID construction_id = env->GetMethodID(obj_class, "<init>", "()V");
    jobject obj = env->NewObject(obj_class, construction_id);
    return obj;
}

//C++层也可以调用Java的函数。实现方法如下：

//	1、获取类名：jclass cls = env->FindClass
//	2、获取类方法：jmethodID mid = env->GetMethodID
//	3、获取类成员变量：fieldID fid=env->GetFieldID
//	4、生成类对象：jobject obj=env->NewObject （jobect也可以从Java层传下来）
//	5、调用类成员方法：env->CallXXXMethod(XXX为Java方法的返回值类型)

//  int        output_recog_state;  //!当前语音处理的内核线程状态        4
//	double     output_blank_buffer; //!缓冲区剩余的空间                4
//	double     output_ss;           //!相识度阈值Similarity state 8
//!测试回调函数的使用
void ndk_test_call_fnx(char *debug_message){

	//@新建字符串用于测试
	JNIEnv* env_;
	char str1[] = "test1,start....";
	char str2[] = "test2,start....";

	globe_JavaVM->AttachCurrentThread(&env_, NULL);
	//找到指定的函数名
	jmethodID mid = env_->GetMethodID(globe_JavaClass, "recogResult", "(Ljava/lang/String;Ljava/lang/String;I)V");
	//调用返回值为void的方法
	env_->CallVoidMethod(globe_JavaObj, mid,env_->NewStringUTF(str1),env_->NewStringUTF(str2),100);

	//状态赋值
	recog_status.output_recog_state  = 100;
	recog_status.output_blank_buffer = 0.2;
	recog_status.output_ss           =0.99;
}

/*
 * Class:     net_telesing_tsdk_tlib_Acomms
 * Method:    encryptCer
 * Signature: (Lnet/telesing/tsdk/tlib/Cer_Infor;I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_net_telesing_tsdk_tlib_Acomms_encryptCer
  (JNIEnv *env , jobject object1 , jobject object2, jint length){
//	LOWE("test \n");

}

/*
 * Class:     net_telesing_tsdk_tlib_Acomms
 * Method:    DecryptCer
 * Signature: (Ljava/lang/String;I)Lnet/telesing/tsdk/tlib/Cer_Infor;
 */
JNIEXPORT jobject JNICALL Java_net_telesing_tsdk_tlib_Acomms_DecryptCer
  (JNIEnv *, jobject, jstring, jint){

}
/*
 * Class:     net_telesing_tsdk_tlib_Acomms
 * Method:    bindCer
 * Signature: (Ljava/lang/String;I)I
 */
JNIEXPORT jint JNICALL Java_net_telesing_tsdk_tlib_Acomms_bindCer
  (JNIEnv * input_env, jobject input_obj, jobject cer_infor, jint inpit_int){

}

/*
 * Class:     net_telesing_tsdk_tlib_Acomms
 * Method:    unbindCer
 * Signature: (Ljava/lang/String;I)I
 */
JNIEXPORT jint JNICALL Java_net_telesing_tsdk_tlib_Acomms_unbindCer
  (JNIEnv * input_env, jobject input_obj, jobject cer_infor,jint cer_length)
{
}

/*
 * Class:     net_telesing_tsdk_tlib_Acomms
 * Method:    isBindCer
 * Signature: (Ljava/lang/String;I)I
 */
JNIEXPORT jint JNICALL Java_net_telesing_tsdk_tlib_Acomms_isBindCer
  (JNIEnv * input_env, jobject input_obj, jobject cer_infor, jint inpit_int){

}

/*
 * Class:     net_telesing_tsdk_tlib_Acomms
 * Method:    getSectionsStatus
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_net_telesing_tsdk_tlib_Acomms_getSectionsStatus
  (JNIEnv *input_env, jobject input_obj,jobject cer_infor){

}

/*
 * Class:     net_telesing_tsdk_tlib_Acomms
 * Method:    genrWave
 * Signature: (Ljava/lang/String;Ljava/lang/String;)[S
 */
JNIEXPORT jshortArray JNICALL Java_net_telesing_tsdk_tlib_Acomms_genrWave
  (JNIEnv *input_env, jobject input_obj, jstring input_string_section, jstring input_string_data){

}

/*
 * Class:     net_telesing_tsdk_tlib_Acomms
 * Method:    startRecog
 * Signature: (Lnet/telesing/tsdk/tlib/Recog_cfg;)I
 */
//(Recog_cfg cfg)
//调试
JNIEXPORT jint JNICALL Java_net_telesing_tsdk_tlib_Acomms_startRecog
  (JNIEnv *input_env, jobject input_obj, jobject recog_cfg){

	LOGW("startRecog");

	//获取Java中的实例类
	jclass objectClass = input_env->FindClass(input_env,"net/telesing/tsdk/tlib/Recog_cfg");

	//获取类中每一个变量的定义
	jfieldID  jgap      = input_env->GetFieldID(objectClass, "gap", "I");
	jfieldID  jpoints   = input_env->GetFieldID(objectClass, "fft_points", "I");

	//改变结构体变量中的数值
	//input_env->SetIntField(recog_cfg,fft_gap,100);
	//获取结构体变量中int类型的变量值
	jint  temp_gap = input_env->GetIntField(recog_cfg,jgap);


	__android_log_print(ANDROID_LOG_INFO, "APP:","gap  : %d", temp_gap);

/*
 *  public double[] start_feq;	//启始频率
	public double[] end_feq;	//截止频率
	public int 		gap   ;		//跳转间隙
	public double 	st ;		//相似度
	public int 		fft_points; //FFT点数
	public int 		fft_chains;	//FFT信道数
	public int 		fft_gap;	//同步失败后跳转间隙
	*/

	//给每一个实例的变量付值
//	(e)->SetIntField(o, nHeight, 10);
//	(e)->SetIntField(o, nWidth, 100);
//	(e)->SetObjectField(o, strStream, (e)->NewStringUTF("my stream"));

	return 0;

}

/*
 * Class:     net_telesing_tsdk_tlib_Acomms
 * Method:    pauseRecog
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_net_telesing_tsdk_tlib_Acomms_pauseRecog
  (JNIEnv *input_env, jobject input_obj){

}

/*
 * Class:     net_telesing_tsdk_tlib_Acomms
 * Method:    restartRecog
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_net_telesing_tsdk_tlib_Acomms_restartRecog
  (JNIEnv *input_env, jobject input_obj){

}

/*
 * Class:     net_telesing_tsdk_tlib_Acomms
 * Method:    stopRecog
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_net_telesing_tsdk_tlib_Acomms_stopRecog
  (JNIEnv *input_env, jobject input_obj){

}
/*
 * Class:     net_telesing_tsdk_tlib_Acomms
 * Method:    stopRecog
 * Signature: ()I
 */
//!解调模块初始化
//!保存当前虚拟机的状态
//!回调函数
//!JavaVM* globe_JavaVM;
//!jobject globe_JavaObj;
//!jclass  globe_JavaClass;
JNIEXPORT jint JNICALL Java_net_telesing_tsdk_tlib_Acomms_initRecog
  (JNIEnv *input_env, jobject input_obj){

		//@保存虚拟机
		input_env->GetJavaVM(&globe_JavaVM);

		//@获取全局的obj
		globe_JavaObj = input_env->NewGlobalRef(input_obj);

		//@获取全局的
		jclass javaClass = input_env->GetObjectClass(input_obj);

		//@获取全局的class
		globe_JavaClass = (jclass)input_env->NewGlobalRef(javaClass);

		ndk_test_call_fnx("test");
}

/*
 * Class:     net_telesing_tsdk_tlib_Acomms
 * Method:    writeRecog
 * Signature: ([SI)I
 */
JNIEXPORT jint JNICALL Java_net_telesing_tsdk_tlib_Acomms_writeRecog
  (JNIEnv *input_env, jobject input_obj, jshortArray input_shortArray, jint input_int){

}

/*
 * Class:     net_telesing_tsdk_tlib_Acomms
 * Method:    setRecogConfig
 * Signature: (Lnet/telesing/tsdk/tlib/Recog_cfg;)I
 */
JNIEXPORT jint JNICALL Java_net_telesing_tsdk_tlib_Acomms_setRecogConfig
  (JNIEnv *input_env, jobject input_Recong, jobject cfg){

}

/*
 * Class:     net_telesing_tsdk_tlib_Acomms
 * Method:    getRecogConfig
 * Signature: ()Lnet/telesing/tsdk/tlib/Recog_cfg;
 */


JNIEXPORT jobject JNICALL Java_net_telesing_tsdk_tlib_Acomms_getRecogConfig
  (JNIEnv *input_env, jobject recog_cfg){


}

/*
 * Class:     net_telesing_tsdk_tlib_Acomms
 * Method:    getRecogStatus
 * Signature: ()Lnet/telesing/tsdk/tlib/Recog_status;
 */
//获取系统的配置信息表
//返回值为
//Recog_cfg
//public double 		ss;				//相似度
//public double  		blank_buffer;	//缓冲区空白区域大小
//public int			recog_stat ;	//通信算法状态,运行还是停止
JNIEXPORT jobject JNICALL Java_net_telesing_tsdk_tlib_Acomms_getRecogStatus
  (JNIEnv *, jobject)
{

	return 0;
}
/*
 * Class:     net_telesing_tsdk_tlib_Acomms
 * Method:    encryptCer
 * Signature: (Ljava/lang/String;I)Ljava/lang/String;
 */
//@获取结构体的参数,并且显示出来
/*

	public   String code_section;	//码段
	public   String expiry_date;	//失效日期
	public   String auth;       	//证书权限
	public   String append_data; 	//随机附加数据


	public   String gen_id;          //证书ID
	public   String gen_sn;          //证书编号
	public   String gen_src;         //证书来源
	public   String gen_time;        //时间
	public   String gen_way;         //生成方式
	public   String gen_ip;			 //生成ID
*/

#ifdef __cplusplus
}
#endif
