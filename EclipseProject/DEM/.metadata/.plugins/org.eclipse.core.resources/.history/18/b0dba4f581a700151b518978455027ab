#ifndef __RSA
#define __RSA
#include <stdio.h>   // rsa_op.cpp
#include <string.h>
#include "openssl\evp.h"
#include "openssl\rand.h"
#include "openssl\rsa.h"
#include "openssl\pem.h"
#include "openssl\err.h"
#include "openssl\rsa.h"

// 公钥指数---->不用替换
const unsigned char PUBLIC_EXPONENT_HEX[] =
{0x01, 0x00, 0x01};

// 私钥指数
const unsigned char PRIVATE_EXPONENT_HEX[] ={
	0xb6, 0xe8, 0x2d, 0x3f, 0x0e, 0x00, 0x31, 0xe1, 0x36, 0x32, 0x84, 0xd4, 0x4a, 0x7f, \
	0xc7, 0xff, 0x14, 0xf4, 0xed, 0x76, 0xd3, 0x52, 0x3e, 0xc9, 0x9c, 0x25, 0x2b, 0xbc, 0x7c, \
	0xcf, 0x9f, 0xa3, 0x79, 0x00, 0x36, 0x2d, 0x9b, 0x31, 0x0c, 0x63, 0xab, 0x86, 0xdf, 0x38, \
	0xf9, 0x80, 0x26, 0x30, 0x3b, 0x03, 0x7c, 0x46, 0xb9, 0xea, 0xa0, 0x74, 0x56, 0xbd, 0x83, \
	0x51, 0xe2, 0x9e, 0xea, 0xfe, 0xe2, 0xd9, 0x14, 0x03, 0xd3, 0x65, 0x41, 0x37, 0x44, 0xeb, \
	0xad, 0x89, 0x20, 0x70, 0x57, 0x39, 0xd0, 0x34, 0xbd, 0x3a, 0x28, 0x92, 0x61, 0xb6, 0xc1, \
	0xf4, 0x38, 0xfd, 0x05, 0x0f, 0x2b, 0xe5, 0xcd, 0x44, 0x35, 0x4a, 0x31, 0x6b, 0x98, 0x2c, \
	0x35, 0x36, 0xe1, 0x14, 0xed, 0x8f, 0xa2, 0x69, 0x43, 0xec, 0xd9, 0x34, 0x40, 0x84, 0x64, \
	0x72, 0x31, 0x1a, 0xfa, 0xbb, 0xde, 0x4c, 0xb5, 0x73, 0xc2, 0x9c, 0x7b, 0x46, 0xc4, 0x35, \
	0x06, 0x7e, 0x38, 0x1f, 0x45, 0xef, 0x75, 0xf3, 0x31, 0xcd, 0x03, 0x4d, 0x6e, 0xb2, 0x0f, \
	0x3a, 0xed, 0x1b, 0x9f, 0xf2, 0xb5, 0x4d, 0xee, 0x48, 0x7d, 0x1c, 0xd2, 0x22, 0xac, 0x7e, \
	0x6d, 0xc0, 0x75, 0x2c, 0x3a, 0x60, 0xc5, 0xb1, 0x1c, 0x27, 0x4b, 0x78, 0x07, 0x1f, 0x16, \
	0xf0, 0xbf, 0x3b, 0xc8, 0x62, 0xc9, 0x9c, 0x9d, 0x3b, 0x07, 0xde, 0xdf, 0xd2, 0x47, 0xbe,\
	0x85, 0x77, 0xa4, 0xc4, 0x74, 0xcf, 0xca, 0xc3, 0x65, 0x55, 0xed, 0x97, 0x6e, 0x17, 0x13, \
	0xd4, 0x75, 0x53, 0xb2, 0x61, 0xbd, 0x74, 0x7a, 0x33, 0x16, 0xe3, 0xd4, 0x27, 0x5e, 0x6a, \
	0x63, 0xdd, 0xc8, 0xb9, 0xfe, 0xc2, 0x3a, 0x6d, 0x06, 0x66, 0x4c, 0x46, 0xe7, 0xef, 0x83, \
	0x87, 0x2f, 0xbe, 0xc3, 0x3a, 0x99, 0x7f, 0x1f, 0x10, 0x1b, 0x51, 0x31, 0x97, 0x6d, 0x49, \
	0x6d, 0x05
};
//const unsigned char PRIVATE_EXPONENT_HEX[] =
//{0x68, 0x4D, 0x32, 0xAA, 0xE1, 0x3B, 0x28, 0xEA, 0x96, 0x48, 0x9A, 0x52, 0xCF, 0xD4, 0x11, \
//0xBE, 0x8E, 0xC1, 0xC2, 0x36, 0xF2, 0x95, 0xB3, 0x66, 0x2E, 0x54, 0x49, 0xFD, 0xAE, 0xDC, \
//0x1D, 0x8E, 0x86, 0xAA, 0xAD, 0x60, 0x5E, 0x82, 0xCD, 0x99, 0xA9, 0x96, 0x64, 0xB0, 0x70, \
//0xA0, 0xC5, 0x3A, 0x78, 0x8B, 0x5F, 0x85, 0x7A, 0x31, 0x21, 0x95, 0xDD, 0xDC, 0x99, 0x0E, \
//0x88, 0x4E, 0xA1, 0x3D, 0x8B, 0xF8, 0x58, 0xA1, 0x7C, 0xE8, 0x8C, 0x37, 0xE1, 0x1D, 0x59, \
//0x76, 0x81, 0x48, 0xFC, 0xF0, 0x1C, 0x37, 0x5A, 0x39, 0x23, 0x05, 0xAB, 0xC1, 0x75, 0xC8, \
//0x7F, 0x7A, 0xA6, 0xB9, 0x25, 0x9D, 0x36, 0xE7, 0x9E, 0xC5, 0xCE, 0x32, 0x45, 0x34, 0xE2, \
//0xEC, 0xDF, 0xB1, 0xD1, 0x4D, 0xC9, 0x31, 0x55, 0xBA, 0x14, 0xB1, 0xD1, 0x09, 0x22, 0x69, \
//0xCF, 0x09, 0xB9, 0xF6, 0xB6, 0x68, 0xA1, 0x49};
// 模数
const unsigned char MODULES_HEX[] ={
	0xbd, 0x1f, 0x71, 0x99, 0xa0, 0x44, 0x1c, 0xb6, 0xe6, 0x4a, 0x83, 0xb4, 0x78, 0x1a, \
	0x26, 0x6b, 0xff, 0x39, 0x7c, 0xe7, 0x35, 0x48, 0x2e, 0x28, 0x09, 0xa7, 0xfd, 0xb6, 0x6b, \
	0xbc, 0x2e, 0x12, 0x92, 0xd8, 0xaf, 0x8a, 0x22, 0x17, 0x5e, 0x1b, 0x2a, 0x61, 0xfc, 0xd7, \
	0x47, 0x3f, 0x53, 0x43, 0xa5, 0x1b, 0x49, 0xc9, 0xc8, 0x36, 0x29, 0xe5, 0x50, 0xc6, 0x2c, \
	0xbd, 0xad, 0x26, 0x02, 0x46, 0xf4, 0x97, 0x00, 0xd2, 0xd4, 0x86, 0x73, 0x5c, 0xbd, 0x15, \
	0x29, 0x6e, 0x3e, 0x22, 0x03, 0xbb, 0x8b, 0xb8, 0xa1, 0x32, 0x98, 0x4f, 0x7e, 0xdb, 0x03, \
	0x9c, 0x58, 0xd8, 0x72, 0x66, 0x4f, 0x66, 0xc0, 0x51, 0x6f, 0x70, 0xa0, 0xef, 0x45, 0xea,\
	0xd1, 0x3c, 0xce, 0xb2, 0x26, 0xed, 0xf7, 0x4d, 0xc3, 0x55, 0xea, 0xb3, 0xfd, 0x77, 0x55, \
	0x95, 0x5a, 0xa4, 0x7d, 0x37, 0xf4, 0xa0, 0xf1, 0x4f, 0x98, 0x1a, 0x7c, 0x3d, 0x6b, 0xf8, \
	0xdf, 0xa5, 0x00, 0x5a, 0x31, 0x1b, 0x96, 0x91, 0xce, 0x55, 0x56, 0xdd, 0x1a, 0xd1, 0xb3, \
	0xef, 0xfc, 0xd1, 0xea, 0x09, 0x76, 0xbe, 0xf0, 0xb9, 0x18, 0x58, 0xf8, 0x01, 0xa7, 0xf6, \
	0xe5, 0x8c, 0x6d, 0x20, 0xda, 0x79, 0x73, 0x4f, 0xed, 0xcb, 0x2c, 0x0e, 0xf0, 0xaa, 0x70, \
	0xd4, 0xb3, 0x79, 0xe8, 0xd9, 0xe1, 0x01, 0xe8, 0x55, 0xbd, 0xdb, 0xa2, 0x44, 0xf7, 0x42, \
	0xea, 0x0e, 0xe7, 0xd6, 0xf8, 0x59, 0xe0, 0x9e, 0x7e, 0x17, 0xd4, 0xb2, 0x06, 0xb4, 0x77, \
	0x7c, 0x2d, 0x8c, 0xfb, 0xd3, 0x3d, 0x10, 0x19, 0x9a, 0x86, 0xd7, 0x12, 0x24, 0x12, 0x96, \
	0xfb, 0x0f, 0xc8, 0xda, 0x29, 0xae, 0x76, 0x11, 0x2c, 0x47, 0x49, 0x2d, 0xa2, 0x83, 0xaa, \
	0xeb, 0xbe, 0x5b, 0x19, 0x5c, 0x2b, 0x0c, 0x98, 0xd1, 0x3b, 0x48, 0x25, 0x17, 0x3b, 0xac, \
	0xf9, 0xdd
};


//const unsigned char MODULES_HEX[] =
//{0xD7, 0x42, 0xCC, 0x97, 0x4D, 0x35, 0x1A, 0x8F, 0xB3, 0xAA, 0x42, 0xAA, 0x6D, 0x10, 0xEB, \
//0x09, 0x58, 0xFA, 0xD2, 0xFB, 0x21, 0x0C, 0xDB, 0xBA, 0xB7, 0x22, 0x45, 0xE0, 0xF8, 0x1F, \
//0x40, 0x26, 0xFD, 0x00, 0xAF, 0x83, 0x1B, 0x5C, 0xE5, 0x68, 0x7B, 0x3F, 0x81, 0x21, 0x9E, \
//0xB4, 0x6B, 0x91, 0xCB, 0x5F, 0x2F, 0x6F, 0x18, 0xA6, 0x4B, 0xA0, 0x83, 0x33, 0x41, 0x7A, \
//0x75, 0xE3, 0x4B, 0xF1, 0x23, 0xCC, 0xA5, 0x76, 0xD0, 0x58, 0x8F, 0x87, 0xE6, 0x4C, 0x66, \
//0xB7, 0x83, 0x29, 0x16, 0xAE, 0x95, 0xE3, 0x76, 0x40, 0x0D, 0x54, 0xB8, 0x87, 0x0E, 0x8D, \
//0x66, 0x0E, 0x0E, 0x1D, 0xC4, 0x16, 0xFD, 0x4F, 0xFA, 0xC4, 0xB9, 0x89, 0x5D, 0x01, 0x2D, \
//0x86, 0x25, 0x44, 0x4B, 0x61, 0x31, 0xE2, 0xBD, 0x9A, 0xCD, 0x58, 0xE6, 0x6A, 0x94, 0xEC, \
//0x94, 0x77, 0x64, 0x50, 0x8C, 0x04, 0xE8, 0x3F};

//密钥长度
#define RSA_KEY_LENGTH 2048

static const char rnd_seed[] = "string to make the random number generator initialized";

class rsa_op
{
public:
    rsa_op();
    ~rsa_op();

    // generate keys, usually no need to call it.
    int generate_key_str();

    // init params
//    int set_params(const unsigned char *pub_expd = PUBLIC_EXPONENT_HEX, int pub_expd_len = 3,
//        const unsigned char *pri_expd = PRIVATE_EXPONENT_HEX, int pri_expd_len = 128,
//        const unsigned char *module = MODULES_HEX, int module_len = 128);

    int set_params(const unsigned char *pub_expd = PUBLIC_EXPONENT_HEX, int pub_expd_len = 3,
        const unsigned char *pri_expd = PRIVATE_EXPONENT_HEX, int pri_expd_len = 128*2,
        const unsigned char *module = MODULES_HEX, int module_len = 128*2);

    // open keys
    int open_prikey_pubkey();
    int open_prikey();
    int open_pubkey();

    // private key to encryption and public key to decryption
    int prikey_encrypt(const unsigned char *in, int in_len,
        unsigned char **out, int &out_len);
    int pubkey_decrypt(const unsigned char *in, int in_len,
        unsigned char **out, int &out_len);
    // public key to encryption and private key to decryption
    int pubkey_encrypt(const unsigned char *in, int in_len,
        unsigned char **out, int &out_len);
    int prikey_decrypt(const unsigned char *in, int in_len,
        unsigned char **out, int &out_len);

    int close_key();
protected:
    void free_res();

private:
    RSA *_pub_key;
    RSA *_pri_key;

    unsigned char *_pub_expd;
    unsigned char *_pri_expd;
    unsigned char *_module;

    int _pub_expd_len;
    int _pri_expd_len;
    int _module_len;
};

#endif

